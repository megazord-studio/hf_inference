demos:
  # ================= text-generation =================
  - model_id: google/gemma-2-2b-it
    task: text-generation
    payload:
      prompt: "Write a funny poem about coding in Switzerland."
  - model_id: tiiuae/falcon-rw-1b
    task: text-generation
    payload:
      prompt: "Write a funny poem about coding in Switzerland."
  - model_id: gpt2
    task: text-generation
    payload:
      prompt: "Write a funny poem about coding in Switzerland."
  - model_id: meta-llama/Llama-3.2-1B
    task: text-generation
    payload:
      prompt: "Write a funny poem about coding in Switzerland."
  - model_id: mistralai/Mistral-7B-v0.1
    task: text-generation
    payload:
      prompt: "Write a funny poem about coding in Switzerland."

  # ================= text2text-generation =================
  - model_id: google/flan-t5-base
    task: text2text-generation
    payload:
      prompt: "Translate to German: The hotel staff are very friendly and helpful."
  - model_id: facebook/bart-base
    task: text2text-generation
    payload:
      prompt: "Translate to German: The hotel staff are very friendly and helpful."
  - model_id: google/mt5-small
    task: text2text-generation
    payload:
      prompt: "Translate to German: The hotel staff are very friendly and helpful."
  - model_id: t5-small
    task: text2text-generation
    payload:
      prompt: "Summarize: Switzerland has scenic trains connecting the Alps."
  - model_id: bigscience/T0pp
    task: text2text-generation
    payload:
      prompt: "Paraphrase: The software was quick to install and easy to use."

  # ================= zero-shot text classification =================
  - model_id: facebook/bart-large-mnli
    task: zero-shot-classification
    payload:
      prompt: "This restaurant was surprisingly good for the price."
      candidate_labels: ["positive", "negative", "neutral"]
  - model_id: MoritzLaurer/DeBERTa-v3-base-mnli
    task: zero-shot-classification
    payload:
      prompt: "This restaurant was surprisingly good for the price."
      candidate_labels: ["positive", "negative", "neutral"]
  - model_id: valhalla/distilbart-mnli-12-1
    task: zero-shot-classification
    payload:
      prompt: "The new policy might increase taxes."
      candidate_labels: ["economy", "sports", "politics"]
  - model_id: roberta-large-mnli
    task: zero-shot-classification
    payload:
      prompt: "I love hiking on weekends."
      candidate_labels: ["travel", "hobby", "finance"]

  # ================= summarization =================
  - model_id: facebook/bart-large-cnn
    task: summarization
    payload:
      prompt: "Switzerland trains are punctual and efficient."
  - model_id: sshleifer/distilbart-cnn-12-6
    task: summarization
    payload:
      prompt: "Switzerland trains are punctual and efficient."
  - model_id: google/pegasus-cnn_dailymail
    task: summarization
    payload:
      prompt: "Swiss cities consistently rank high for quality of life due to safety and infrastructure."
  - model_id: t5-base
    task: summarization
    payload:
      prompt: "The Swiss rail network is known for seamless connections and scenic routes."
  - model_id: philschmid/bart-large-cnn-samsum
    task: summarization
    payload:
      prompt: "A: Are you coming to Zurich? B: Yes, I will arrive at 3 PM by train."

  # ================= translation =================
  - model_id: Helsinki-NLP/opus-mt-en-de
    task: translation
    payload:
      prompt: "Good morning, how are you?"
  - model_id: facebook/m2m100_418M
    task: translation
    payload:
      prompt: "Good morning, how are you?"
      src_lang: "en"
      tgt_lang: "sv"
  - model_id: facebook/nllb-200-distilled-600M
    task: translation
    payload:
      prompt: "Good morning, how are you?"
      src_lang: "eng_Latn"
      tgt_lang: "deu_Latn"
  - model_id: facebook/wmt19-en-de
    task: translation
    payload:
      prompt: "Please proceed to platform 4 for the next departure."
  - model_id: facebook/mbart-large-50-many-to-many-mmt
    task: translation
    payload:
      prompt: "The mountain pass is closed due to snow."
      src_lang: "en_EN"
      tgt_lang: "de_DE"
  - model_id: Helsinki-NLP/opus-mt-en-fr
    task: translation
    payload:
      prompt: "The cable car offers amazing views of the Alps."

  # ================= question-answering =================
  - model_id: deepset/roberta-base-squad2
    task: question-answering
    payload:
      qa_question: "Who wrote Faust?"
      qa_context: "Johann Wolfgang von Goethe was a German writer and statesman."
  - model_id: distilbert-base-uncased-distilled-squad
    task: question-answering
    payload:
      qa_question: "Who wrote Faust?"
      qa_context: "Johann Wolfgang von Goethe was a German writer and statesman."
  - model_id: deepset/bert-base-cased-squad2
    task: question-answering
    payload:
      qa_question: "What is the capital of Switzerland?"
      qa_context: "Bern is the de facto capital of Switzerland."
  - model_id: xlm-roberta-large-finetuned-squad2
    task: question-answering
    payload:
      qa_question: "What does SBB refer to?"
      qa_context: "SBB is the national railway company of Switzerland."
  - model_id: deepset/minilm-uncased-squad2
    task: question-answering
    payload:
      qa_question: "What language is mainly spoken in Zurich?"
      qa_context: "In Zurich, Swiss German is predominantly spoken."

  # ================= fill-mask =================
  - model_id: roberta-base
    task: fill-mask
    payload:
      mask_sentence: "The capital of Switzerland is <mask>."
      mask_sentence_alt: "The capital of Switzerland is [MASK]."
  - model_id: bert-base-uncased
    task: fill-mask
    payload:
      mask_sentence: "the capital of switzerland is [MASK]."
      mask_sentence_alt: "the capital of switzerland is <mask>."
  - model_id: albert-base-v2
    task: fill-mask
    payload:
      mask_sentence: "The famous mountain in Switzerland is [MASK]."
      mask_sentence_alt: "The famous mountain in Switzerland is <mask>."
  - model_id: distilroberta-base
    task: fill-mask
    payload:
      mask_sentence: "Swiss chocolate is <mask>."
      mask_sentence_alt: "Swiss chocolate is [MASK]."
  - model_id: google/electra-base-generator
    task: fill-mask
    payload:
      mask_sentence: "The city of Basel is known for its [MASK] fair."
      mask_sentence_alt: "The city of Basel is known for its <mask> fair."

  # ================= sentiment-analysis =================
  - model_id: distilbert-base-uncased-finetuned-sst-2-english
    task: sentiment-analysis
    payload:
      prompt: "I absolutely loved this place!"
  - model_id: cardiffnlp/twitter-roberta-base-sentiment
    task: sentiment-analysis
    payload:
      prompt: "This is terrible news."
  - model_id: nlptown/bert-base-multilingual-uncased-sentiment
    task: sentiment-analysis
    payload:
      prompt: "Das Essen war hervorragend und der Service schnell."
  - model_id: finiteautomata/bertweet-base-sentiment-analysis
    task: sentiment-analysis
    payload:
      prompt: "OMG this view is insane üòç"
  - model_id: microsoft/deberta-v3-base
    task: sentiment-analysis
    payload:
      prompt: "Meh, could be better."

  # ================= token-classification (NER) =================
  - model_id: dslim/bert-base-NER
    task: token-classification
    payload:
      prompt: "Barack Obama was born in Hawaii."
  - model_id: dbmdz/bert-large-cased-finetuned-conll03-english
    task: token-classification
    payload:
      prompt: "Barack Obama was born in Hawaii."
  - model_id: Davlan/bert-base-multilingual-cased-ner-hrl
    task: token-classification
    payload:
      prompt: "Roger Federer lives in Switzerland."
  - model_id: Jean-Baptiste/camembert-ner
    task: token-classification
    payload:
      prompt: "Emmanuel Macron est n√© √† Amiens."
  - model_id: xlm-roberta-large-finetuned-conll03-english
    task: token-classification
    payload:
      prompt: "Angela Merkel met in Berlin."

  # ================= feature-extraction =================
  - model_id: sentence-transformers/all-MiniLM-L6-v2
    task: feature-extraction
    payload:
      prompt: "This is a short sentence."
  - model_id: sentence-transformers/paraphrase-MiniLM-L6-v2
    task: feature-extraction
    payload:
      prompt: "This is a short sentence."
  - model_id: bert-base-uncased
    task: feature-extraction
    payload:
      prompt: "Embedding this sentence."
  - model_id: roberta-large
    task: feature-extraction
    payload:
      prompt: "Another embedding sentence."
  - model_id: intfloat/e5-small
    task: feature-extraction
    payload:
      prompt: "query: best hikes near Zermatt"

  # ================= table-question-answering =================
  - model_id: google/tapas-large-finetuned-wtq
    task: table-question-answering
    payload:
      table:
        - ["transformers", "library"]
        - ["pandas", "dataframes"]
      table_query: "What is in the first cell?"
  - model_id: google/tapas-base-finetuned-wtq
    task: table-question-answering
    payload:
      table:
        - ["city", "country"]
        - ["Bern", "Switzerland"]
      table_query: "Which country is Bern in?"
  - model_id: google/tapas-large-finetuned-wikisql-supervised
    task: table-question-answering
    payload:
      table:
        - ["item", "price"]
        - ["Chocolate", "5"]
      table_query: "What is the price of Chocolate?"
  - model_id: google/tapas-base
    task: table-question-answering
    payload:
      table:
        - ["A", "B"]
        - ["1", "2"]
      table_query: "What is under column A?"

  # ================= visual-question-answering (VQA) =================
  - model_id: dandelin/vilt-b32-finetuned-vqa
    task: visual-question-answering
    payload:
      image_path: "image.jpg"
      question: "What is on the table?"
  - model_id: Salesforce/blip-vqa-base
    task: visual-question-answering
    payload:
      image_path: "image.jpg"
      question: "What color are the chairs?"
  - model_id: Salesforce/instructblip-vicuna-7b
    task: visual-question-answering
    payload:
      image_path: "image.jpg"
      question: "Describe the scene briefly."
  - model_id: microsoft/florence-2-base-ft
    task: visual-question-answering
    payload:
      image_path: "image.jpg"
      question: "Summarize the image in one sentence."

  # ================= document-question-answering =================
  - model_id: impira/layoutlm-document-qa
    task: document-question-answering
    payload:
      image_path: "image.jpg"
      question: "What is the total amount?"
  - model_id: naver-clova-ix/donut-base-finetuned-docvqa
    task: document-question-answering
    payload:
      image_path: "image.jpg"
      question: "What is the total amount?"
  - model_id: microsoft/layoutlmv3-base
    task: document-question-answering
    payload:
      image_path: "image.jpg"
      question: "Who is the recipient?"
  - model_id: navervision/lectrobase
    task: document-question-answering
    payload:
      image_path: "image.jpg"
      question: "What is the invoice number?"
  - model_id: impira/layoutlmv2-finetuned-docvqa
    task: document-question-answering
    payload:
      image_path: "image.jpg"
      question: "What is the due date?"

  # ================= image-text-to-text (VLMs) =================
  - model_id: Qwen/Qwen2.5-VL-7B-Instruct
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Give a concise caption and mention one color."
  - model_id: HuggingFaceM4/idefics2-8b
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Give a concise caption and mention one color."
  - model_id: llava-hf/llava-1.5-7b-hf
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Describe this scene in one sentence."
  - model_id: openbmb/MiniCPM-Llama3-V-2_5
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Give a concise caption and mention one color."
  - model_id: 01-ai/Yi-VL-6B
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Give a concise caption and mention one color."
  - model_id: OpenGVLab/InternVL2-8B
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Give a concise caption and mention one color."
  - model_id: Salesforce/blip2-opt-2.7b
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Caption this photo with one color mentioned."
  - model_id: microsoft/kosmos-2-patch14-224
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Brief caption, include one color."
  - model_id: microsoft/Florence-2-base-ft
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Brief caption, include one color."
  - model_id: google/paligemma-3b-pt-224
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "One-sentence caption with a color."
  - model_id: THUDM/cogvlm2-llama3-chat-19B
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Brief caption mentioning an object."
  - model_id: Qwen/Qwen2-VL-2B-Instruct
    task: image-text-to-text
    payload:
      image_path: "image.jpg"
      prompt: "Describe in one sentence."

  # ================= image-to-text =================
  - model_id: Salesforce/blip-image-captioning-base
    task: image-to-text
    payload:
      image_path: "image.jpg"
  - model_id: nlpconnect/vit-gpt2-image-captioning
    task: image-to-text
    payload:
      image_path: "image.jpg"
  - model_id: Salesforce/blip2-flan-t5-xl
    task: image-to-text
    payload:
      image_path: "image.jpg"
  - model_id: microsoft/git-base-coco
    task: image-to-text
    payload:
      image_path: "image.jpg"
  - model_id: google/pix2struct-textcaps-base
    task: image-to-text
    payload:
      image_path: "image.jpg"

  # ================= zero-shot image classification =================
  - model_id: openai/clip-vit-base-patch32
    task: zero-shot-image-classification
    payload:
      image_path: "image.jpg"
      candidate_labels: ["patio", "dome", "restaurant", "planetarium"]
  - model_id: openai/clip-vit-large-patch14
    task: zero-shot-image-classification
    payload:
      image_path: "image.jpg"
      candidate_labels: ["beach", "balcony", "forest"]
  - model_id: laion/CLIP-ViT-H-14-laion2B-s32B-b79K
    task: zero-shot-image-classification
    payload:
      image_path: "image.jpg"
      candidate_labels: ["chair", "plant", "sea"]
  - model_id: mlfoundations/open_clip_pytorch_model
    task: zero-shot-image-classification
    payload:
      image_path: "image.jpg"
      candidate_labels: ["table", "mountain", "city"]

  # ================= image-classification =================
  - model_id: google/vit-base-patch16-224
    task: image-classification
    payload:
      image_path: "image.jpg"
  - model_id: facebook/convnext-base-224
    task: image-classification
    payload:
      image_path: "image.jpg"
  - model_id: microsoft/resnet-50
    task: image-classification
    payload:
      image_path: "image.jpg"
  - model_id: timm/efficientnet_b3_rw
    task: image-classification
    payload:
      image_path: "image.jpg"

  # ================= zero-shot object detection =================
  - model_id: google/owlvit-base-patch32
    task: zero-shot-object-detection
    payload:
      image_path: "image.jpg"
      candidate_labels: ["chair", "table", "plant", "sea"]
  - model_id: google/owlvit-large-patch14
    task: zero-shot-object-detection
    payload:
      image_path: "image.jpg"
      candidate_labels: ["window", "umbrella", "tree"]
  - model_id: IDEA-Research/grounding-dino-base
    task: zero-shot-object-detection
    payload:
      image_path: "image.jpg"
      candidate_labels: ["chair", "table", "plant"]

  # ================= object-detection =================
  - model_id: facebook/detr-resnet-50
    task: object-detection
    payload:
      image_path: "image.jpg"
  - model_id: facebook/detr-resnet-101
    task: object-detection
    payload:
      image_path: "image.jpg"
  - model_id: hustvl/yolos-small
    task: object-detection
    payload:
      image_path: "image.jpg"
  - model_id: microsoft/conditional-detr-resnet-50
    task: object-detection
    payload:
      image_path: "image.jpg"

  # ================= image-segmentation =================
  - model_id: facebook/detr-resnet-50-panoptic
    task: image-segmentation
    payload:
      image_path: "image.jpg"
  - model_id: facebook/mask2former-swin-base-coco-panoptic
    task: image-segmentation
    payload:
      image_path: "image.jpg"
  - model_id: nvidia/segformer-b0-finetuned-ade-512-512
    task: image-segmentation
    payload:
      image_path: "image.jpg"
  - model_id: facebook/mask2former-swin-large-coco-panoptic
    task: image-segmentation
    payload:
      image_path: "image.jpg"
  - model_id: nvidia/segformer-b3-finetuned-ade-512-512
    task: image-segmentation
    payload:
      image_path: "image.jpg"

  # ================= depth-estimation =================
  - model_id: Intel/dpt-hybrid-midas
    task: depth-estimation
    payload:
      image_path: "image.jpg"
  - model_id: Intel/dpt-large
    task: depth-estimation
    payload:
      image_path: "image.jpg"
  - model_id: Intel/dpt-swinv2-tiny-256
    task: depth-estimation
    payload:
      image_path: "image.jpg"
  - model_id: LiheYoung/depth-anything-small-hf
    task: depth-estimation
    payload:
      image_path: "image.jpg"

  # ================= audio (speech & emotions) =================
  - model_id: facebook/wav2vec2-base-960h
    task: automatic-speech-recognition
    payload:
      audio_path: "audio.wav"
  - model_id: superb/hubert-base-superb-er
    task: audio-classification
    payload:
      audio_path: "audio.wav"
  - model_id: openai/whisper-base
    task: automatic-speech-recognition
    payload:
      audio_path: "audio.wav"
  - model_id: facebook/wav2vec2-large-960h-lv60-self
    task: automatic-speech-recognition
    payload:
      audio_path: "audio.wav"
  - model_id: jonatasgrosman/wav2vec2-large-xlsr-53-english
    task: automatic-speech-recognition
    payload:
      audio_path: "audio.wav"
  - model_id: speechbrain/emotion-recognition-wav2vec2-IEMOCAP
    task: audio-classification
    payload:
      audio_path: "audio.wav"

  # ================= text-to-speech (TTS) =================
  - model_id: facebook/mms-tts-eng
    task: text-to-speech
    payload:
      tts_text: "Hello from Switzerland! This is a TTS demo."
  - model_id: facebook/mms-tts-deu
    task: text-to-speech
    payload:
      tts_text: "Guten Tag aus der Schweiz!"
  - model_id: espnet/kan-bayashi_ljspeech_vits
    task: text-to-speech
    payload:
      tts_text: "Welcome to the Alps."
  - model_id: microsoft/speecht5_tts
    task: text-to-speech
    payload:
      tts_text: "This is a SpeechT5 test."

  # ================= text-to-audio / music generation =================
  - model_id: facebook/musicgen-small
    task: text-to-audio
    payload:
      tta_prompt: "Lo-fi chillhop beat with warm drums, mellow keys, and a smooth bassline."
  - model_id: facebook/musicgen-medium
    task: text-to-audio
    payload:
      tta_prompt: "Synthwave arpeggios with a steady beat."
  - model_id: facebook/musicgen-melody
    task: text-to-audio
    payload:
      tta_prompt: "Jazz trio with upright bass, ride cymbal, and piano."
  - model_id: audioldm/audio-ldm
    task: text-to-audio
    payload:
      tta_prompt: "Ambient pads with gentle rainfall."

  # ================= text-to-image (Stable Diffusion) =================
  - model_id: runwayml/stable-diffusion-v1-5
    task: text-to-image
    payload:
      prompt: "A cozy wooden cabin in snowy mountains at sunrise, watercolor style."
  - model_id: stabilityai/stable-diffusion-2-1
    task: text-to-image
    payload:
      prompt: "A Swiss mountain village at dusk, oil painting."
  - model_id: stabilityai/sdxl-turbo
    task: text-to-image
    payload:
      prompt: "A minimalist poster of the Alps with bold shapes."
  - model_id: dreamlike-art/dreamlike-photoreal-2.0
    task: text-to-image
    payload:
      prompt: "Photorealistic chalet with warm lights at night."

  # ---- video-classification ----
  - model_id: MCG-NJU/videomae-base
    task: video-classification
    payload:
      video_path: "video.mp4"
  - model_id: MCJoker520/videomae-small-finetuned-kinetics
    task: video-classification
    payload:
      video_path: "video.mp4"

  # ---- zero-shot-audio-classification ----
  - model_id: laion/clap-htsat-fused
    task: zero-shot-audio-classification
    payload:
      audio_path: "audio.wav"
      candidate_labels: ["speech", "music", "rain", "applause"]
  - model_id: laion/clap-htsat-unfused
    task: zero-shot-audio-classification
    payload:
      audio_path: "audio.wav"
      candidate_labels: ["guitar", "violin", "drums"]

  # ---- mask-generation (Segment Anything) ----
  - model_id: facebook/sam-vit-base
    task: mask-generation
    payload:
      image_path: "image.jpg"
  - model_id: facebook/sam-vit-huge
    task: mask-generation
    payload:
      image_path: "image.jpg"

  # ---- image-feature-extraction (vision embeddings) ----
  - model_id: openai/clip-vit-base-patch32
    task: image-feature-extraction
    payload:
      image_path: "image.jpg"
  - model_id: google/vit-base-patch16-224
    task: image-feature-extraction
    payload:
      image_path: "image.jpg"

  # ---- image-to-image (requires diffusers-like support; likely to fail if not implemented) ----
  - model_id: runwayml/stable-diffusion-inpainting
    task: image-to-image
    payload:
      init_image_path: "image.jpg"
      prompt: "Make the sky sunset orange."
  - model_id: stabilityai/stable-diffusion-2-inpainting
    task: image-to-image
    payload:
      init_image_path: "image.jpg"
      prompt: "Turn the chairs red."
